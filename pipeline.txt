##################### Jenkins Setup #####################
---------------------------------------------------------
1. Access Jenkins:
   - Open Jenkins by navigating to:  
     http://<EC2-IP>:8080

2. Get Jenkins Admin Password:
   - Run the following command on your EC2 instance to retrieve the Jenkins admin password:
     ```bash
     sudo cat /var/lib/jenkins/secrets/initialAdminPassword
     ```

3. Configure Jenkins:
   - Install necessary plugins:
     - Go to `Manage Jenkins` → `Manage Plugins` and install the following plugins:
       - `nodejs` (for Node.js setup)
       - `sonar` (for SonarQube integration)
       - `docker-workflow` (for Docker commands)
       - `pipeline-utility-steps` (for additional utility steps)
       - `aws credentials` (for aws integration)
     - After installation, restart Jenkins to ensure the plugins are loaded.

##################### Nexus Setup ######################
---------------------------------------------------------
1. Access Nexus Repository:
   - Navigate to:  
     http://<Nexus-IP>:8081

2. Get Nexus Admin Password:
   - Run the following command to get the Nexus password:
     ```bash
     docker ps
     docker exec -it <container_name_or_id> bash
     cat /nexus-data/admin.password
     ```

3. Login to Nexus:
   - Use the admin password retrieved from the above command to log in to Nexus.

4. Add Nexus Credentials in Jenkins:
   - Go to `Manage Jenkins` → `Manage Credentials` to add the `nexus-credentials` with your Nexus username and password.

#################### SonarQube Setup ####################
---------------------------------------------------------
1. Access SonarQube:
   - Navigate to:  
     http://<SonarQube-IP>:9000

2. Login to SonarQube:
   - Username: `admin`  
   - Password: `admin`  
   - Change the password to: `Admin@123456` after logging in.

3. Configure SonarQube in Jenkins:
   - Go to `Manage Jenkins` → `Configure System` and add a SonarQube instance with the SonarQube server IP address.
   - Install `SonarQube Scanner` via `Manage Jenkins` → `Global Tool Configuration`.

################### Node.js Setup in Jenkins ##################
---------------------------------------------------------
1. Install Node.js:
   - Go to `Manage Jenkins` → `Global Tool Configuration`.
   - Add a new tool with the name `NodeJS` and select the latest version of Node.js.

2. Configure Node.js in Pipeline:
   - In your Jenkins pipeline script, reference the Node.js tool as follows:
     ```groovy
     tools {
         nodejs 'NodeJS'  // Ensure this matches your NodeJS tool in Jenkins
     }
     ```






################### Pipeline ##################

pipeline {
    agent any

    tools {
        nodejs 'NodeJS' // Ensure this matches your NodeJS tool in Jenkins
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner' // Ensure this matches your SonarQube tool in Jenkins
        DOCKER_IMAGE = "akashshewale0801/myportfolio"  // No tag yet, we'll add it dynamically
        AWS_REGION = "ap-south-1"
        EKS_CLUSTER_NAME = "portfolio-cluster"
        GITHUB_REPO_URL = "https://github.com/akash08-ak/MyPortfolio.git"
        GITHUB_CREDENTIALS_ID = "github-credentials" // Ensure this is set correctly
    }

    stages {
        // -----------------------------------
        // Setup Tools
        // -----------------------------------
        stage('Setup Tools') {
            steps {
                echo 'Tools installed successfully.'  // You can customize this message
            }
            post {
                success {
                    echo "Tools installed successfully."
                }
            }
        }

        // -----------------------------------
        // Clean Workspace
        // -----------------------------------
        stage('Clean Workspace') {
            steps {
                cleanWs()  // Clean the workspace before starting the pipeline
            }
            post {
                success {
                    echo "Workspace cleaned successfully."
                }
            }
        }

        // -----------------------------------
        // Checkout Code
        // -----------------------------------
        stage('Checkout Code') {
            steps {
                git credentialsId: "${GITHUB_CREDENTIALS_ID}", url: "${GITHUB_REPO_URL}"
            }
            post {
                success {
                    echo "Code checked out successfully from GitHub."
                }
            }
        }

        // -----------------------------------
        // Install Dependencies
        // -----------------------------------
        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
            post {
                success {
                    echo "Dependencies installed successfully."
                }
            }
        }

        // -----------------------------------
        // Fetch Version from package.json
        // -----------------------------------
        stage('Fetch Version') {
            steps {
                script {
                    try {
                        def version = sh(
                            script: 'node -p "require(\'./package.json\').version"',
                            returnStdout: true
                        ).trim()
                        echo "Fetched version: ${version}"
                        env.VERSION = version // Save version for later stages
                    } catch (Exception e) {
                        echo "Error fetching version: ${e.message}"
                        error("Failed to fetch version from package.json")
                    }
                }
            }
            post {
                success {
                    echo "Version fetched successfully: ${env.VERSION}"
                }
            }
        }

        // -----------------------------------
        // Code Quality Analysis
        // -----------------------------------
        stage('Code Quality Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    withSonarQubeEnv('SonarQube') { // This should match the SonarQube installation name in Jenkins
                        sh """
                        ${SCANNER_HOME}/bin/sonar-scanner \
                          -Dsonar.projectKey=MyPortfolioProject \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=http://13.234.238.9:9000 \
                          -Dsonar.login=${SONAR_TOKEN}
                        """
                    }
                }
            }
            post {
                success {
                    echo "Code quality analysis completed successfully."
                }
            }
        }

        // -----------------------------------
        // Build ReactJS
        // -----------------------------------
        stage('Build ReactJS') {
            steps {
                sh 'npm run build'
            }
            post {
                success {
                    echo "ReactJS project built successfully."
                }
            }
        }

        // -----------------------------------
        // Docker
        //   - Login
        //   - Build Image
        //   - Push Image
        // -----------------------------------
        stage('Docker - Login') {
            steps {
                script {
                    echo "Logging into Docker Hub..."
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                            echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin
                        """
                    }
                }
            }
            post {
                success {
                    echo "Docker login successful."
                }
                failure {
                    echo "Docker login failed. Please check credentials."
                }
            }
        }

        stage('Docker - Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image..."
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker build -t \$DOCKER_USERNAME/myportfolio:${env.VERSION} ."
                    }
                }
            }
            post {
                success {
                    echo "Docker image built successfully."
                }
            }
        }

        stage('Docker - Push Docker Image to Docker Hub') {
            steps {
                script {
                    echo "Pushing Docker image to Docker Hub..."
                    withCredentials([usernamePassword(credentialsId: 'docker-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "docker push \$DOCKER_USERNAME/myportfolio:${env.VERSION}"
                    }
                }
            }
            post {
                success {
                    echo "Docker image pushed to Docker Hub successfully."
                }
            }
        }

        // -----------------------------------
        // Delete Existing Deployment
        // -----------------------------------
        stage('Delete Existing Deployment') {
            steps {
                script {
                    // Deleting the existing deployment (without touching pods)
                    sh 'kubectl delete deployment myportfolio-deployment --ignore-not-found=true'
                }
            }
            post {
                success {
                    echo "Existing deployment deleted successfully."
                }
                failure {
                    echo "Failed to delete existing deployment. Proceeding with deployment."
                }
            }
        }

        // -----------------------------------
        // Deploy to EKS
        // -----------------------------------
        stage('Deploy to EKS') {
            steps {
                script {
                    // Update kubeconfig for EKS to communicate with the cluster
                    sh 'aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME'

                    // Apply the updated deployment file to EKS
                    sh 'kubectl apply -f deployment.yaml'
                }
            }
        }

        // -----------------------------------
        // Verify Deployment
        // -----------------------------------
        stage('Verify Deployment') {
            steps {
                script {
                    // Verify the deployment and pods are running
                    sh 'kubectl get pods'
                    sh 'kubectl get svc'
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed. Check logs for errors."
        }

        // Clean up workspace after the build process
        cleanup {
            cleanWs()  // Clean workspace after the build process
        }
    }
}
